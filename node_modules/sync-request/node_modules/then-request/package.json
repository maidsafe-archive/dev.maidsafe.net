{
  "name": "then-request",
  "version": "2.1.1",
  "description": "A request library that returns promises, inspired by request",
  "keywords": [],
  "browser": "./browser.js",
  "dependencies": {
    "caseless": "~0.9.0",
    "concat-stream": "^1.4.7",
    "http-basic": "^2.0.0",
    "http-response-object": "^1.0.1",
    "promise": "^6.0.1",
    "qs": "^2.3.3"
  },
  "devDependencies": {
    "browserify": "^8.1.1",
    "exorcist": "^0.1.6",
    "istanbul": "^0.3.5",
    "minifyify": "^6.0.0",
    "mkdirp": "^0.5.0",
    "rimraf": "^2.2.8",
    "testit": "^1.2.0"
  },
  "scripts": {
    "test": "node test/index.js && istanbul cover test/index.js",
    "prebuild": "rimraf dist && mkdirp dist",
    "prepublish": "npm run build",
    "build": "npm run build:full && npm run build:min",
    "build:full": "browserify -d --standalone request browser.js | exorcist -u request.js.map dist/request.js.map > dist/request.js",
    "build:min": "browserify -d --standalone request browser.js -p [minifyify --compressPath . --map request.min.js.map --output dist/request.min.js.map] > dist/request.min.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/then/then-request.git"
  },
  "author": {
    "name": "ForbesLindesay"
  },
  "license": "MIT",
  "readme": "# then-request\n\nA request library that returns promises, inspired by request\n\n[![Build Status](https://img.shields.io/travis/then/then-request/master.svg)](https://travis-ci.org/then/then-request)\n[![Dependency Status](https://img.shields.io/gemnasium/then/then-request.svg)](https://gemnasium.com/then/then-request)\n[![NPM version](https://img.shields.io/npm/v/then-request.svg)](https://www.npmjs.org/package/then-request)\n\n## Installation\n\n    npm install then-request\n\n## Usage\n\n`request(method, url, options, callback?)`\n\ne.g.\n\n```js\nvar request = require('then-request');\n\nrequest('GET', 'http://example.com').done(function (res) {\n  console.log(res.getBody());\n});\n```\n\n**Method:**\n\nAn HTTP method (e.g. `GET`, `POST`, `PUT`, `DELETE` or `HEAD`). It is not case sensitive.\n\n**URL:**\n\nA url as a string (e.g. `http://example.com`). Relative URLs are allowed in the browser.\n\n**Options:**\n\n - `qs` - an object containing querystring values to be appended to the uri\n - `headers` - http headers (default: `{}`)\n - `body` - body for PATCH, POST and PUT requests.  Must be a `Buffer` or `String` (only strings are accepted client side)\n - `json` - sets `body` but to JSON representation of value and adds `Content-type: application/json`.  Does not have any affect on how the response is treated.\n - `cache` - only used in node.js (browsers already have their own caches) Can be `'memory'`, `'file'` or your own custom implementaton (see https://github.com/ForbesLindesay/http-basic#implementing-a-cache).\n - `followRedirects` - defaults to `true` but can be explicitly set to `false` on node.js to prevent then-request following redirects automatically.\n - `maxRedirects` - sets the maximum number of redirects to follow before erroring on node.js (default: `Infinity`)\n - `gzip` - defaults to `true` but can be explicitly set to `false` on node.js to prevent then-request automatically supporting the gzip encoding on responses.\n - `timeout` (default: `false`) - times out if no response is returned within the given number of milliseconds.\n - `socketTimeout` (default: `false`) - calls `req.setTimeout` internally which causes the request to timeout if no new data is seen for the given number of milliseconds.  This option is ignored in the browser.\n - `retry` (default: `false`) - retry GET requests.  Set this to `true` to retry when the request errors or returns a status code greater than or equal to 400 (can also be a function that takes `(err, req, attemptNo) => shouldRetry`)\n - `retryDelay` (default: `200`) - the delay between retries (can also be set to a function that takes `(err, res, attemptNo) => delay`)\n - `maxRetries` (default: `5`) - the number of times to retry before giving up.\n\n\n**Callback / Returns:**\n\nIf a callback is provided it is called with `err` and `res`. If no callback is provided, a [Promise](https://www.promisejs.org/) is returned that eventually resolves to `res`.  The resulting Promise also has an additional `.getBody(encoding?)` method that is equivallent to calling `.then(function (res) { return res.getBody(encoding?); })`.\n\n### Response\n\nNote that even for status codes that represent an error, the promise will be resolved as the request succeeded.  You can call `getBody` if you want to error on invalid status codes.  The response has the following properties:\n\n - `statusCode` - a number representing the HTTP status code\n - `headers` - http response headers\n - `body` - a string if in the browser or a buffer if on the server\n - `url` - the URL that was requested (in the case of redirects on the server, this is the final url that was requested)\n\nIt also has a method `getBody(encoding?)` which looks like:\n\n```js\nfunction getBody(encoding) {\n  if (this.statusCode >= 300) {\n    var err = new Error('Server responded with status code ' + this.statusCode + ':\\n' + this.body.toString(encoding));\n    err.statusCode = this.statusCode;\n    err.headers = this.headers;\n    err.body = this.body;\n    throw err;\n  }\n  return encoding ? this.body.toString(encoding) : this.body;\n}\n```\n\n## License\n\n  MIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/then/then-request/issues"
  },
  "homepage": "https://github.com/then/then-request",
  "_id": "then-request@2.1.1",
  "_shasum": "4d3ff009c2fd57136308e5411086337681b1edf5",
  "_from": "https://registry.npmjs.org/then-request/-/then-request-2.1.1.tgz",
  "_resolved": "https://registry.npmjs.org/then-request/-/then-request-2.1.1.tgz"
}
