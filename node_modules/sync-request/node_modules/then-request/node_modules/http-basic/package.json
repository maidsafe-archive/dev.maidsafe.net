{
  "name": "http-basic",
  "version": "2.3.4",
  "description": "Very low level wrapper arround http.request/https.request",
  "keywords": [
    "http",
    "https",
    "request",
    "fetch",
    "gzip",
    "deflate",
    "redirect",
    "cache",
    "etag",
    "cache-control"
  ],
  "dependencies": {
    "caseless": "~0.9.0",
    "concat-stream": "^1.4.6",
    "http-response-object": "^1.0.0"
  },
  "devDependencies": {},
  "scripts": {
    "test": "node test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ForbesLindesay/http-basic.git"
  },
  "author": {
    "name": "ForbesLindesay"
  },
  "license": "MIT",
  "readme": "# http-basic\n\nSimple wrapper arround http.request/https.request\n\n[![Build Status](https://img.shields.io/travis/ForbesLindesay/http-basic/master.svg)](https://travis-ci.org/ForbesLindesay/http-basic)\n[![Dependency Status](https://img.shields.io/gemnasium/ForbesLindesay/http-basic.svg)](https://gemnasium.com/ForbesLindesay/http-basic)\n[![NPM version](https://img.shields.io/npm/v/http-basic.svg)](https://www.npmjs.org/package/http-basic)\n\n## Installation\n\n    npm install http-basic\n\n## Usage\n\n```js\nvar request = require('http-basic');\n\nvar options = {followRedirects: true, gzip: true, cache: 'memory'};\n\nvar req = request('GET', 'http://example.com', options, function (err, res) {\n  if (err) throw err;\n  console.dir(res.statusCode);\n  res.body.resume();\n});\nreq.end();\n```\n\n**method:**\n\nThe http method (e.g. `GET`, `POST`, `PUT`, `DELETE` etc.)\n\n**url:**\n\nThe url as a string (e.g. `http://example.com`).  It must be fully qualified and either http or https.\n\n**options:**\n\n - `headers` - (default `{}`) http headers\n - `agent` - (default: `false`) controlls keep-alive (see http://nodejs.org/api/http.html#http_http_request_options_callback)\n - `followRedirects` - (default: `false`) - if true, redirects are followed (note that this only affects the result in the callback)\n - `maxRedirects` - (default: `Infinity`) - limit the number of redirects allowed.\n - `gzip` (default: `false`) - automatically accept gzip and deflate encodings.  This is kept completely transparent to the user.\n - `cache` - (default: `null`) - `'memory'` or `'file'` to use the default built in caches or you can pass your own cache implementation.\n - `timeout` (default: `false`) - times out if no response is returned within the given number of milliseconds.\n - `socketTimeout` (default: `false`) - calls `req.setTimeout` internally which causes the request to timeout if no new data is seen for the given number of milliseconds.\n - `retry` (default: `false`) - retry GET requests.  Set this to `true` to retry when the request errors or returns a status code greater than or equal to 400 (can also be a function that takes `(err, req, attemptNo) => shouldRetry`)\n - `retryDelay` (default: `200`) - the delay between retries (can also be set to a function that takes `(err, res, attemptNo) => delay`)\n - `maxRetries` (default: `5`) - the number of times to retry before giving up.\n\n**callback:**\n\nThe callback is called with `err` as the first argument and `res` as the second argument. `res` is an [http-response-object](https://github.com/ForbesLindesay/http-response-object).  It has the following properties:\n\n - `statusCode` - a number representing the HTTP Status Code\n - `headers` - an object representing the HTTP headers\n - `body` - a readable stream respresenting the request body.\n - `url` - the URL that was requested (in the case of redirects, this is the final url that was requested)\n\n**returns:**\n\nIf the method is `GET`, `DELETE` or `HEAD`, it returns `undefined`.\n\nOtherwise, it returns a writable stream for the body of the request.\n\n## Implementing a Cache\n\nA `Cache` is an object with two methods:\n\n - `getResponse(url, callback)` - retrieve a cached response object\n - `setResponse(url, response)` - cache a response object\n\nA cached response object is an object with the following properties:\n\n - `statusCode` - Number\n - `headers` - Object (key value pairs of strings)\n - `body` - Stream (a stream of binary data)\n - `requestHeaders` - Object (key value pairs of strings)\n - `requestTimestamp` - Number\n\n`getResponse` should call the callback with an optional error and either `null` or a cached response object, depending on whether the url can be found in the cache.  Only `GET`s are cached.\n\n`setResponse` should just swallow any errors it has (or resport them using `console.warn`).\n\nA cache may also define any of the methods from `lib/cache-utils.js` to override behaviour for what gets cached.  It is currently still only possible to cache \"get\" requests, although this could be changed.\n\n## License\n\n  MIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ForbesLindesay/http-basic/issues"
  },
  "homepage": "https://github.com/ForbesLindesay/http-basic",
  "_id": "http-basic@2.3.4",
  "_shasum": "e24088665002fa5fbc7dc938cf4f5d7aeee66742",
  "_from": "https://registry.npmjs.org/http-basic/-/http-basic-2.3.4.tgz",
  "_resolved": "https://registry.npmjs.org/http-basic/-/http-basic-2.3.4.tgz"
}
