{
  "name": "sync-request",
  "version": "2.0.1",
  "description": "Make synchronous web requests",
  "browser": "./browser.js",
  "keywords": [
    "request",
    "http",
    "https",
    "cache",
    "browserify",
    "synchronous",
    "sync"
  ],
  "dependencies": {
    "concat-stream": "^1.4.7",
    "http-response-object": "^1.0.1",
    "spawn-sync": "^1.0.1",
    "then-request": "^2.0.1"
  },
  "scripts": {
    "test": "node test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ForbesLindesay/sync-request.git"
  },
  "author": {
    "name": "ForbesLindesay"
  },
  "license": "MIT",
  "readme": "# sync-request\n\nMake synchronous web requests with cross platform support.\n\n[![Build Status](https://img.shields.io/travis/ForbesLindesay/sync-request/master.svg)](https://travis-ci.org/ForbesLindesay/sync-request)\n[![Dependency Status](https://img.shields.io/gemnasium/ForbesLindesay/sync-request.svg)](https://gemnasium.com/ForbesLindesay/sync-request)\n[![NPM version](https://img.shields.io/npm/v/sync-request.svg)](https://www.npmjs.org/package/sync-request)\n\n## Installation\n\n    npm install sync-request\n\n## Usage\n\n```js\nrequest(method, url, options)\n```\n\ne.g.\n\n```js\nvar request = require('sync-request');\nvar res = request('GET', 'http://example.com');\nconsole.log(res.getBody());\n```\n\n**Method:**\n\nAn HTTP method (e.g. `GET`, `POST`, `PUT`, `DELETE` or `HEAD`). It is not case sensitive.\n\n**URL:**\n\nA url as a string (e.g. `http://example.com`). Relative URLs are allowed in the browser.\n\n**Options:**\n\n - `qs` - an object containing querystring values to be appended to the uri\n - `headers` - http headers (default: `{}`)\n - `body` - body for PATCH, POST and PUT requests.  Must be a `Buffer` or `String` (only strings are accepted client side)\n - `json` - sets `body` but to JSON representation of value and adds `Content-type: application/json`.  Does not have any affect on how the response is treated.\n - `cache` - Set this to `'file'` to enable a local cache of content.  A separate process is still spawned even for cache requests.  This option is only used if running in node.js\n - `followRedirects` - defaults to `true` but can be explicitly set to `false` on node.js to prevent then-request following redirects automatically.\n - `gzip` - defaults to `true` but can be explicitly set to `false` on node.js to prevent then-request automatically supporting the gzip encoding on responses.\n\n**Returns:**\n\nA `Response` object.\n\nNote that even for status codes that represent an error, the request function will still return a response.  You can call `getBody` if you want to error on invalid status codes.  The response has the following properties:\n\n - `statusCode` - a number representing the HTTP status code\n - `headers` - http response headers\n - `body` - a string if in the browser or a buffer if on the server\n\nIt also has a method `res.getBody(encoding?)` which looks like:\n\n```js\nfunction getBody(encoding) {\n  if (this.statusCode >= 300) {\n    var err = new Error('Server responded with status code ' + this.statusCode + ':\\n' + this.body.toString(encoding));\n    err.statusCode = this.statusCode;\n    err.headers = this.headers;\n    err.body = this.body;\n    throw err;\n  }\n  return encoding ? this.body.toString(encoding) : this.body;\n}\n```\n\n## How is this possible?\n\nInternally, this uses a separate worker process that is run using either [childProcess.spawnSync](http://nodejs.org/docs/v0.11.13/api/child_process.html#child_process_child_process_spawnsync_command_args_options) if available, or falling back to [spawn-sync](https://www.npmjs.org/package/spawn-sync) if not.  The fallback will attempt to install a native module for synchronous execution, and fall back to doing busy waiting for a file to exist.  All this ultimatley means that the module is totally cross platform and does not require native code compilation support.\n\nThe worker then makes the actual request using [then-request](https://www.npmjs.org/package/then-request) so this has almost exactly the same API as that.\n\nThis can also be used in a web browser via browserify because xhr has built in support for synchronous execution.  Note that this is not recommended as it will be blocking.\n\n## License\n\n  MIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ForbesLindesay/sync-request/issues"
  },
  "homepage": "https://github.com/ForbesLindesay/sync-request",
  "_id": "sync-request@2.0.1",
  "_shasum": "c50d555f9528f7512a0bcea3bf69618911217061",
  "_from": "https://registry.npmjs.org/sync-request/-/sync-request-2.0.1.tgz",
  "_resolved": "https://registry.npmjs.org/sync-request/-/sync-request-2.0.1.tgz"
}
